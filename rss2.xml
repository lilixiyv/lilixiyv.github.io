<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>唤问</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>唤询这个小孩</description>
    <pubDate>Fri, 27 Oct 2023 02:40:27 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>SQL</title>
      <link>http://example.com/2023/10/27/DBS-3-SQL/</link>
      <guid>http://example.com/2023/10/27/DBS-3-SQL/</guid>
      <pubDate>Fri, 27 Oct 2023 00:33:38 GMT</pubDate>
      
      <description>&lt;p&gt;第三章-SQL&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>第三章-SQL</p><span id="more"></span><h2 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h2><h3 id="SQL特点"><a href="#SQL特点" class="headerlink" title="SQL特点"></a>SQL特点</h3><ol><li><p>综合统一</p><ul><li><p>集数据定义语言、数据操纵语言、数据控制语言、事务控制语言于一体。</p><ul><li><p>数据定义语言（Data Definition Language, DDL）</p><ul><li><p>Create&#x2F;Alter&#x2F;Drop：数据库结构schema定义；</p></li><li><p>数据操纵语言（Data Manipulation Language, DML）</p><ul><li>CRUD(Create, Retrieve, Update, Delete): Insert, Select, Update, Delete：数据查询与修改</li></ul></li><li><p>数据控制语言（Data Control Language）</p><ul><li>Grant&#x2F;Revoke：权限控制</li></ul></li></ul></li><li><p>事务控制语言（Transaction Control Language）</p><ul><li>Begin Transaction&#x2F;Commit&#x2F;Rollback：保障数据修改的原子性</li></ul></li></ul></li><li><p>可以独立完成数据库生命周期中的全部活动</p></li><li><p>用户数据库投入运行后允许随时逐步修改模式</p></li><li><p>数据操作统一</p></li></ul></li><li><p>高度非过程化</p><ul><li><p>非关系数据模型的数据操纵语言“面向过程”，必须指定存取路径；</p></li><li><p>SQL的存取路径的选择及操作过程由DBMS自动完成。</p></li></ul></li><li><p>面向集合的操作模式</p><ul><li><p>非关系数据模型面向记录，操作对象为一条记录</p></li><li><p>SQL采用集合操作模式</p></li></ul></li><li><p>以同一种语法结构提供多种使用方式</p><ul><li><p>SQL是独立语言</p></li><li><p>SQL是嵌入式语言，可以嵌入到高级语言程序中</p></li><li><p>可以采用数据库驱动程序API</p></li></ul></li><li><p>语言简洁，易学易用</p><ul><li>DDL语句引导词：Create, Alter, Drop</li><li>DML语句引导词：Insert, Delete, Update, Select</li><li>DCL语句引导词：Grant, Revoke</li></ul></li></ol><h2 id="SQL的基本概念"><a href="#SQL的基本概念" class="headerlink" title="SQL的基本概念"></a>SQL的基本概念</h2><p>SQL支持关系数据库的三级模式结构（内模式-模式-外模式）</p><h3 id="基本表"><a href="#基本表" class="headerlink" title="基本表"></a>基本表</h3><ul><li>本身独立存在的表</li><li>SQL关系与表一一对应</li><li>一个或多个基本表对应一个存储文件<ul><li>取决于具体的DBMS实现</li></ul></li><li>一个表可以有若干索引<ul><li>同样取决于具体的DBMS实现</li></ul></li></ul><h3 id="存储文件"><a href="#存储文件" class="headerlink" title="存储文件"></a>存储文件</h3><ul><li>逻辑结构(schema)组成了关系数据库的模式，由用户定义</li><li>物理结构(内模式)对用户是隐蔽的、透明的</li><li>文件路径和文件名可由用户配置或指定</li><li>由DBMS进行管理，实现各异</li><li>用户修改模式，DBMS实现模式到内模式的自动映射与管理</li></ul><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul><li>从一个或几个基本表通过查询而导出的表</li><li>数据库中只存放视图的定义，不存放视图对应的数据</li><li>视图是虚表</li><li>用户可以在视图上再定义视图</li></ul><h2 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h2><p>SQL的数据定义功能</p><ul><li>模式定义</li><li>表定义</li><li>视图和索引的定义</li></ul><h3 id="模式的定义与删除"><a href="#模式的定义与删除" class="headerlink" title="模式的定义与删除"></a>模式的定义与删除</h3><ul><li>模式规定了一个命令空间</li><li>在命令空间中可以定义该模式包含的数据库对象<ul><li>数据库对象:基本表、视图、索引、数据类型、同义词等</li><li>Schema包含的对象可以是表(table)、列(column)、数据类型(data视图(view)、存储过程(stored procedures)、关系type) relationships)、主键(primary key)、外键(foreign key)等</li></ul></li><li>MySQL Schema<ul><li>在MySQL中，Schema和Database等价，Database之下是数据库对象。</li></ul></li><li>Oracle Schema<ul><li>Database和Instance一对一关系，Database指服务器上所有数据文件日志文件等总和，而Instance指运行在服务器的一组后台进程</li><li>Schema是指某个User名下所有数据库对象的总和，而不是一个独立存在的实体。如果user名下没有创建任何数据库对象，则不存在schema</li><li>Oracle的schema相当于数据库对象的命名空间，和UserName是等价的。</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/">数据库</category>
      
      
      <category domain="http://example.com/tags/%E8%AF%BE%E4%B8%9A/">课业</category>
      
      
      <comments>http://example.com/2023/10/27/DBS-3-SQL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Adnentures of the Dialectic</title>
      <link>http://example.com/2023/10/22/Adnenturesofthe-Dialectic/</link>
      <guid>http://example.com/2023/10/22/Adnenturesofthe-Dialectic/</guid>
      <pubDate>Sun, 22 Oct 2023 12:26:39 GMT</pubDate>
      
      <description>&lt;p&gt;《辩证法的历险》，未明子，长沙橘洲植青俱乐部&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>《辩证法的历险》，未明子，长沙橘洲植青俱乐部</p><span id="more"></span><p>历史总是对（回溯性建构的）原初事实的违背，但不意味着相对主义，因为误认的结构有其稳定性（意识形态）。</p><p>儒家秩序——夫妻和睦——压抑呢？</p><p>把在特定的史观下为为所谓的历史事实赋予意义，只能将其视为僵死的路标，用以发现事件的任何解释都有剩余，要看到视角的差异、张力</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%9C%AA%E6%98%8E%E5%AD%90/">未明子</category>
      
      
      <category domain="http://example.com/tags/%E5%93%B2%E5%AD%A6/">哲学</category>
      
      <category domain="http://example.com/tags/%E5%8F%A5%E8%AF%BB/">句读</category>
      
      <category domain="http://example.com/tags/%E5%8E%86%E5%8F%B2/">历史</category>
      
      
      <comments>http://example.com/2023/10/22/Adnenturesofthe-Dialectic/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>The Sublime Object of Ideology</title>
      <link>http://example.com/2023/10/19/The-Sublime-Object-of-Ideology/</link>
      <guid>http://example.com/2023/10/19/The-Sublime-Object-of-Ideology/</guid>
      <pubDate>Thu, 19 Oct 2023 12:28:44 GMT</pubDate>
      
      <description>&lt;p&gt;《意识形态的崇高客体》阅读笔记&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>《意识形态的崇高客体》阅读笔记</p><span id="more"></span><h2 id="新版前言：观念的便秘"><a href="#新版前言：观念的便秘" class="headerlink" title="新版前言：观念的便秘"></a>新版前言：观念的便秘</h2><ul><li>托勒密化<ul><li>“弦理论”<ul><li>应不再把时间和空间视为现实的基本构成要素等</li></ul></li><li>精神分析<ul><li>认知科学的基本前提是精神分析仍是古典心理学的托勒密化</li></ul></li><li>马克思对亚当·斯密和李嘉图的批判</li></ul></li><li>哥白尼式</li></ul><p>精神分析的哲学内核蒙恩于黑格尔的辩证法，也只有以黑格尔的辩证法为背景才具有可读性。</p><p>欲通过精神分析和辩证法的双向互动使精神分析和辩证法同时自我救赎。</p><p>辩证法即“扬弃”（sublation）。扬弃的基本运作是化约，被扬弃之物</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%BD%90%E6%B3%BD%E5%85%8B/">齐泽克</category>
      
      
      <category domain="http://example.com/tags/%E5%93%B2%E5%AD%A6/">哲学</category>
      
      <category domain="http://example.com/tags/%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90/">精神分析</category>
      
      <category domain="http://example.com/tags/%E9%98%85%E8%AF%BB/">阅读</category>
      
      
      <comments>http://example.com/2023/10/19/The-Sublime-Object-of-Ideology/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>安全协议分析-BAN逻辑</title>
      <link>http://example.com/2023/10/19/SP-BAN/</link>
      <guid>http://example.com/2023/10/19/SP-BAN/</guid>
      <pubDate>Thu, 19 Oct 2023 12:05:05 GMT</pubDate>
      
      <description>&lt;p&gt;安全协议分析，主要为BAN逻辑&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>安全协议分析，主要为BAN逻辑</p><span id="more"></span><h2 id="安全协议安全性分析方法"><a href="#安全协议安全性分析方法" class="headerlink" title="安全协议安全性分析方法"></a>安全协议安全性分析方法</h2><h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><ul><li>可证明安全性理论与方法</li><li>形式化分析理论与方法</li><li>混合理论与方法</li><li>零知识证明理论与方法</li><li>安全多方计算理论与方法</li></ul><h2 id="BAN逻辑"><a href="#BAN逻辑" class="headerlink" title="BAN逻辑"></a>BAN逻辑</h2><p>BAN逻辑是一种形式化分析方法。</p><h3 id="安全协议形式化分析主要技术"><a href="#安全协议形式化分析主要技术" class="headerlink" title="安全协议形式化分析主要技术"></a>安全协议形式化分析主要技术</h3><ul><li>逻辑方法:采用基于信仰和知识逻辑的形式分析方法，比如以BAN逻辑为代表的类BAN逻辑</li><li>通用形式化分析方法:采用一些通用的形式分析方法分析安全协议，例如应用Petri网等</li><li>模型检测方法:基于代数方法构造一个运行协议的有限状态系统模型，再利用状态检测工具来分析安全协议</li><li>定理证明方法:将密码协议的安全性做为定理来证明，这是一个新的研究热点</li></ul><h3 id="BAN逻辑系统假设"><a href="#BAN逻辑系统假设" class="headerlink" title="BAN逻辑系统假设"></a>BAN逻辑系统假设</h3><ul><li>时间假设<ul><li>协议分析中区分两个时间段，过去时间段和当前时间段。</li><li>当前时间段开始于协议运行的开始阶段，所有在此时间之前发送的消息都认为是在过去时间段发送的消息。</li><li>如果信仰在开始时成立，则在整个当前时间段都成立，而在过去时间段成立的信仰，在当前时间段不一定成立。</li></ul></li><li>密钥假设<ul><li>加密系统是完善的，只有知道密钥的主体才能解读密文消息，任何不知道密钥的主体都不能解读密文消息，也没有办法根据密文推导密钥</li><li>密文块不能被算改，也不能用几个小的密文块来拼凑成一个新的大的密文块，一个消息中的两个密文块被看作是分两次分别到达的</li><li>密文含有足够的冗余消息，解密者可以根据解密的结果来判断他是否已经正确解密</li><li>消息中有足够的冗余消息，使得主体可以判断该消息是否来源于自身</li></ul></li><li>BAN逻辑还假设协议的参与主体是诚实的</li></ul><h3 id="BAN逻辑的语法、语义"><a href="#BAN逻辑的语法、语义" class="headerlink" title="BAN逻辑的语法、语义"></a>BAN逻辑的语法、语义</h3><ul><li>BAN逻辑是一种多类型模态逻辑 (many-sorted model logic)</li><li>BAN逻辑的语义中主要包含下面三种处理对象:<ul><li>主体(principals)</li><li>密钥(keys)</li><li>公式(formula)，也被称为语句或命题(statements)</li></ul></li><li>符号规定<ul><li>A，B表示主体，S表示服务器</li><li>$K_{ab}$、$K_{as}$和$K_{bs}$表示共享密钥，$K_a$、$K_b$,和$K_s$表示公开密钥，$K_a^{-1}$，$K_b^{-1}$表示相应的秘密密钥</li><li>$N_a$、$N_b$等表示随机数</li><li>P、Q、R等表示主体变量，K表示密钥变量，X、Y表示公式变量。</li></ul></li><li>包含和取这一种命题连接词，用逗号表示</li></ul><table><thead><tr><th>符号</th><th>语义</th></tr></thead><tbody><tr><td>$P$、$Q$</td><td>主体变量，泛指参与协议的各方</td></tr><tr><td>$X$</td><td>公式变量，泛指协议中消息的含义</td></tr><tr><td>$P</td><td>&#x3D; X$</td></tr><tr><td>$P\Delta X$</td><td>$P$看见$X$</td></tr><tr><td>$P</td><td>\sim X$</td></tr><tr><td>$P</td><td>\Rightarrow X$</td></tr><tr><td>$#(X)$</td><td>$X$是新鲜的</td></tr><tr><td>$P\overset{k}{\longleftrightarrow}Q$</td><td>$P$和$Q$共享仍具有保密性的密钥$k$</td></tr><tr><td>$\overset{k}{\longrightarrow}P$</td><td>$P$具有公钥$k$（对应私钥为$k^{-1}$），私钥只有$P$及他信任的人持有</td></tr><tr><td>$P\Leftrightarrow_X Q$</td><td>$P$和$Q$共享秘密$X$</td></tr><tr><td>$P\overset{k}{\longleftrightarrow}Q$</td><td>用$K$加密$X$后的消息</td></tr><tr><td>$<X>_Y$</td><td>$X$与秘密$Y$合成的消息</td></tr></tbody></table><h3 id="BAN逻辑的推理规则"><a href="#BAN逻辑的推理规则" class="headerlink" title="BAN逻辑的推理规则"></a>BAN逻辑的推理规则</h3><ol><li><p>消息含义规则</p><ol><li><p>共享密钥情况<br>$$<br>\frac{P|\equiv Q\overset{k_{PQ}}{\longleftrightarrow}P,P\Delta {X}<em>{k</em>{PQ}}}{P|\equiv Q|\sim X}<br>$$</p></li><li><p>公钥情况</p><p><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E6%B6%88%E6%81%AF%E5%90%AB%E4%B9%89-%E5%85%AC%E9%92%A5.png" alt="BAN-规则-消息含义-公钥"></p></li><li><p>共享秘密情况</p><p><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E6%B6%88%E6%81%AF%E5%90%AB%E4%B9%89-%E5%85%B1%E4%BA%AB%E7%A7%98%E5%AF%86.png" alt="BAN-规则-消息含义-共享秘密"></p></li></ol></li><li><p>随机数验证规则（nonce-verification rule）</p><ol><li><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E9%9A%8F%E6%9C%BA%E6%95%B0%E9%AA%8C%E8%AF%81.png" alt="BAN-规则-随机数验证"></li></ol></li><li><p>管辖规则</p><ol><li><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E7%AE%A1%E8%BE%96.png" alt="BAN-规则-管辖"></li></ol></li><li><p>接收消息规则（seeing rules）</p><ol><li><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E6%8E%A5%E6%94%B6-1.png" alt="BAN-规则-接收-1"></li><li><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E6%8E%A5%E6%94%B6-2.png" alt="BAN-规则-接收-2"></li><li><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E6%8E%A5%E6%94%B6-3.png" alt="BAN-规则-接收-3"></li></ol></li><li><p>新鲜性规则</p><ol><li><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E6%96%B0%E9%B2%9C%E6%80%A7.png" alt="BAN-规则-新鲜性"></li></ol></li><li><p>信仰规则（belief relus）</p><ol><li><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E4%BF%A1%E4%BB%B0-1.png" alt="BAN-规则-信仰-1"></li><li><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E4%BF%A1%E4%BB%B0-2.png" alt="BAN-规则-信仰-2"></li><li><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E4%BF%A1%E4%BB%B0-3.png" alt="BAN-规则-信仰-3"></li><li><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E4%BF%A1%E4%BB%B0-4.png" alt="BAN-规则-信仰-4"></li></ol></li><li><p>密钥与秘密共享规则（key and secret rules）</p><ol><li><img src="/../images/SecurityProtocol/BAN-%E8%A7%84%E5%88%99-%E5%85%B1%E4%BA%AB%E7%A7%98%E5%AF%86.png" alt="BAN-规则-共享秘密"></li></ol></li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE/">安全协议</category>
      
      
      <category domain="http://example.com/tags/%E8%AF%BE%E4%B8%9A/">课业</category>
      
      
      <comments>http://example.com/2023/10/19/SP-BAN/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>同态加密</title>
      <link>http://example.com/2023/10/19/SP-HE/</link>
      <guid>http://example.com/2023/10/19/SP-HE/</guid>
      <pubDate>Thu, 19 Oct 2023 02:44:51 GMT</pubDate>
      
      <description>&lt;p&gt;安全协议之同态加密&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>安全协议之同态加密</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>同态加密（Homomorphic Encryption,HE），指满足密文同态运算性质的加密算法。</p><p>大致可表示为：<br>$$<br>f(E(m_1),E(m_2))&#x3D;E(f(m_1,m_2))<br>$$</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>全同态加密（Fully Homomorphic Encryption,FHE）</p><ul><li>支持对密文任意形式的计算</li></ul></li><li><p>半同态加密（Somewhat Homomorphic Encryption,SWHE)</p><p>部分同态加密（Partially Homomorphic Encryption,PHE）</p><ul><li>支持对密文部分形式的计算，如仅支持加法、仅支持乘法或仅支持有限次运算。</li></ul></li><li><p>一般而言，其他运算可通过加法和乘法构造，故若一个加密算法同时满足加法同态性和乘法同态性，则称其满足全同态性。</p></li><li><p>全同态加密仍方案探索阶段。</p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE/">安全协议</category>
      
      
      <category domain="http://example.com/tags/%E8%AF%BE%E4%B8%9A/">课业</category>
      
      
      <comments>http://example.com/2023/10/19/SP-HE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HTML</title>
      <link>http://example.com/2023/10/19/HTML/</link>
      <guid>http://example.com/2023/10/19/HTML/</guid>
      <pubDate>Thu, 19 Oct 2023 02:01:31 GMT</pubDate>
      
      <description>&lt;p&gt;HTML5学习日志&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>HTML5学习日志</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>超文本标记语言（HyperText Markup Language,HTML），是一种用于创建网页端标准标记语言，以<code>.html</code>或<code>.htm</code>为后缀名。</p><p>HTML文档由HTML元素定义。</p><h3 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h3><p>一个HTML元素由开始标签（start tag）、结束标签（end tag）及内容构成。</p><ul><li>HTML 元素以开始标签起始</li><li>HTML 元素以结束标签终止</li><li>元素的内容是开始标签与结束标签之间的内容</li><li>某些 HTML 元素具有空内容 (empty content)</li><li>空元素在开始标签中进行关闭 (以开始标签的结束而结束)，如<code>&lt;br\&gt;</code></li><li>大多数 HTML 元素可拥有属性</li></ul><h3 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h3><ul><li>HTML标签可拥有属性</li><li>属性以名称&#x2F;值对的形式出现</li><li>属性在HTML元素的开始标签中规定</li><li>属性应小写（在HTML4及之前版本中不区分大小写，但XHTML强制要求使用小写属性）</li><li>属性值需用引号包含，单或双引号均可，但属性值本身含引号时需用单引号。</li></ul><h2 id="HTML元素-1"><a href="#HTML元素-1" class="headerlink" title="HTML元素"></a>HTML元素</h2><h3 id="HTML标题"><a href="#HTML标题" class="headerlink" title="HTML标题"></a>HTML标题</h3><p>标题（Heading）是通过<code>&lt;h1&gt;-&lt;h6&gt;</code>等标签定义，数字表示标题层级。</p><h3 id="HTML水平线"><a href="#HTML水平线" class="headerlink" title="HTML水平线"></a>HTML水平线</h3><p><code>&lt;hr /&gt;</code></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><code>&lt;!--...--&gt;</code></p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p><code>&lt;p&gt;</code></p><h3 id="折行"><a href="#折行" class="headerlink" title="折行"></a>折行</h3><p><code>&lt;br /&gt;</code></p><h3 id="预格式文本"><a href="#预格式文本" class="headerlink" title="预格式文本"></a>预格式文本</h3><p><code>&lt;pre&gt;</code></p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ol><li><a href="https://www.w3school.com.cn/html/index.asp">HTML 教程 (w3school.com.cn)</a></li><li><a href="https://www.runoob.com/html/html5-intro.html">HTML5 教程 | 菜鸟教程 (runoob.com)</a></li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/web%E5%BC%80%E5%8F%91/">web开发</category>
      
      
      <category domain="http://example.com/tags/%E6%95%99%E7%A8%8B/">教程</category>
      
      <category domain="http://example.com/tags/%E8%AF%AD%E8%A8%80/">语言</category>
      
      <category domain="http://example.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      
      <comments>http://example.com/2023/10/19/HTML/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>BAT</title>
      <link>http://example.com/2023/10/18/BAT/</link>
      <guid>http://example.com/2023/10/18/BAT/</guid>
      <pubDate>Wed, 18 Oct 2023 00:56:42 GMT</pubDate>
      
      <description>&lt;p&gt;批处理学习日志&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>批处理学习日志</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>批处理脚本运行于windows系统，以<code>.bat</code>或<code>.cmd</code>为后缀名，大致与Linux系统下的<code>.sh</code>文件对应，可直接双击运行或在命令行中运行，运行环境基本为命令行环境。</p><p>批处理命令大致与命令行命令效果一致。批处理命令不区分大小写。</p><h3 id="常见功能"><a href="#常见功能" class="headerlink" title="常见功能"></a>常见功能</h3><ul><li>可以可以读取用户的输入，以便进一步处理。</li><li>有控制结构: for ，if ， while 和switch </li><li>更好的自动化和脚本支持高级功能，如函数和数组</li><li>支持正则表达式</li><li>可以包含其他编程代码，如Perl。</li></ul><h2 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>显示字符串。</p><p>批处理脚本默认在运行时显示其命令。在命令前加<code>@</code>以取消显示。</p><p>使用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> off</span><br></pre></td></tr></table></figure><p> 取消显示之后的命令，但会显示该命令本身，故一般与<code>@</code>搭配使用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br></pre></td></tr></table></figure><p>从而取消显示脚本的命令。</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>注释。以<code>rem</code>开头的行被视为注释，执行时自动忽略，但可以回显（回显即脚本运行时显示其命令）。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p><code>:</code>也可用于注释。</p><ul><li>任何以冒号:开头的字符行,在批处理中都被视作标号，而直接忽略其后的所有内容。<ul><li>有效标号: 冒号后紧跟一个以字母数字开头的字符串，goto 语句可以识别。</li><li>无效标号: 冒号后紧跟一个非字母数字的一个特殊符号，goto 无法识别的标号，可以起到注释作用，所以*<code>::</code> 常被用作注释符号*。</li></ul></li><li><code>::</code>后的字符行在执行时不会回显。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>将变量名包含在<code>%</code>进行引用。</p><p>如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> %massage%</span><br></pre></td></tr></table></figure><p>输出<code>massage</code>变量的值。</p><h3 id="传入参数"><a href="#传入参数" class="headerlink" title="传入参数"></a>传入参数</h3><p>批处理执行时可传入参数，在脚本中使用<code>%1</code>、<code>%2</code>、<code>%3</code>等进行调用。</p><p>例如：</p><p>a.bat:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> %<span class="number">1</span></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">2</span></span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.bat <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>使用<code>set</code>命令给变量赋值。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> [/<span class="type">A</span>] [<span class="type">variable</span>]=[<span class="type">value</span>]</span><br></pre></td></tr></table></figure><ul><li>&#x2F;A：若该变量的值为数值，则使用该参数</li><li>varible：变量名</li><li>value：变量值</li><li>注意等号左右不要有空格</li></ul><p>例如：</p><p>add.bat：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /A a=<span class="number">1</span></span><br><span class="line"><span class="built_in">set</span> /A b=<span class="number">2</span></span><br><span class="line"><span class="built_in">set</span> /A c=%a%+%b%</span><br><span class="line"><span class="built_in">echo</span> %c%</span><br></pre></td></tr></table></figure><p>则运行<code>add.bat</code>可得：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>默认情况下，变量作用域为<em>整个命令提示符</em>会话。</p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>调用<code>SETLOCAL</code>命令。</p><p>在调用<code>SETLOCAL</code>之后，变量赋值在调用<code>ENDLOCAL</code>、<code>EXIT</code>或执行到脚本的文件末尾（EOF）时都会返回。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>同正常变量调用方式。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>DOS中，字符串为一个有序的字符集合。</p><h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><p>使用<code>set</code>命令，如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> massage=hello world</span><br></pre></td></tr></table></figure><h3 id="空字符串"><a href="#空字符串" class="headerlink" title="空字符串"></a>空字符串</h3><p>可通过如下方式创建空字符串（在命令行中似乎无法通过该方式创建空字符串）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> a=</span><br></pre></td></tr></table></figure><p>可在方括号中包含变量名，并将其与方括号中的值进行比较。</p><p>通过该方式可判断空字符串：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [%<span class="type">a</span>%]==[] <span class="built_in">echo</span> string a is empty</span><br></pre></td></tr></table></figure><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><p>使用<code>set</code>命令后跟多个字符串（也可为数值变量）即可完成拼接。</p><p>例如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">SET</span> a=Hello </span><br><span class="line"><span class="built_in">SET</span> b=World </span><br><span class="line"><span class="built_in">SET</span> /A d=<span class="number">50</span> </span><br><span class="line"><span class="built_in">SET</span> c=%a% and %b% %d%</span><br><span class="line"><span class="built_in">echo</span> %c%</span><br></pre></td></tr></table></figure><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>无特定函数，可通过自定义函数实现。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> str=Hello World</span><br><span class="line">call :strLen str strlen</span><br><span class="line"><span class="built_in">echo</span> String is %strlen% characters long</span><br><span class="line"><span class="keyword">exit</span> /b</span><br><span class="line"></span><br><span class="line">:strLen</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">:strLen_Loop</span><br><span class="line">   <span class="keyword">if</span> not <span class="string">&quot;!%1:~%len%!&quot;</span>==<span class="string">&quot;&quot;</span> <span class="built_in">set</span> /A len+=<span class="number">1</span> &amp; goto :strLen_Loop</span><br><span class="line">(endlocal &amp; <span class="built_in">set</span> %<span class="number">2</span>=%len%)</span><br><span class="line">goto :eof</span><br></pre></td></tr></table></figure><h3 id="字符串提取"><a href="#字符串提取" class="headerlink" title="字符串提取"></a>字符串提取</h3><p>使用<code>~</code>，形如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%str:~[<span class="type">num1</span>],[<span class="type">num2</span>]%</span><br></pre></td></tr></table></figure><p>提取从$[[num1],[num2])$的字符串（从0开始）</p><p>也可使用负数，表示从末尾开始计算，<code>[num2]</code>可以缺省，缺省时一直截取到字符串末尾。</p><p>例如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">set</span> str=Helloworld </span><br><span class="line"><span class="built_in">echo</span> %str:~<span class="number">0</span>,<span class="number">5</span>% %str:~<span class="literal">-5</span>%</span><br></pre></td></tr></table></figure><p>将输出</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure><h3 id="替换字符"><a href="#替换字符" class="headerlink" title="替换字符"></a>替换字符</h3><p>使用<code>=</code>，形如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%str1:[<span class="type">sub_str1</span>]=[<span class="type">str2</span>]%</span><br></pre></td></tr></table></figure><p>将字符串<code>str1</code>中的所有<code>[sub_str1]</code>替换为<code>[str2]</code>。</p><p>可以用于删除字符。</p><p>例如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">set</span> str=This message needs changed. </span><br><span class="line"><span class="built_in">set</span> str=%str:needs=has% </span><br><span class="line"><span class="built_in">echo</span> %str%</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>没有专门的数组类型，但可通过逐个定义来实现，所以严格意义上是用类似方式命名的一系列变量集合。</p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ol><li><a href="https://www.yiibai.com/batch_script">批处理教程 (yiibai.com)</a></li><li><a href="https://www.w3cschool.cn/pclrmsc/">批处理入门手册_w3cschool</a></li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%89%B9%E5%A4%84%E7%90%86/">批处理</category>
      
      
      <category domain="http://example.com/tags/%E5%B7%A5%E5%85%B7/">工具</category>
      
      <category domain="http://example.com/tags/%E6%95%99%E7%A8%8B/">教程</category>
      
      <category domain="http://example.com/tags/%E8%AF%AD%E8%A8%80/">语言</category>
      
      
      <comments>http://example.com/2023/10/18/BAT/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>安全多方计算</title>
      <link>http://example.com/2023/10/17/SP-MPC/</link>
      <guid>http://example.com/2023/10/17/SP-MPC/</guid>
      <pubDate>Tue, 17 Oct 2023 02:23:01 GMT</pubDate>
      
      <description>&lt;p&gt;安全协议之安全多方计算&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>安全协议之安全多方计算</p><span id="more"></span><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>安全多方计算，SMC(MPC)(Secure Muti-party Computation)；</p></li><li><p>安全多方计算是指在无可信第三方情况下，多个参与方协同计算一个约定函数，且保证每一方仅获取自己的计算结果，无法通过计算过程中的交互数据推测出其他任意一方的输入和输出数据(除非函数本身可以由自己的输入推测出其他参与方的输入和输出)</p></li><li><p>主要计算需求: 比较、线性操作 (加、乘)、非线性操作、求交集</p></li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>正确性：多方计算参与各方通过约定安全多方计算协议发起计算任务并进行协同计算运算数据结果具备正确性。</li><li>隐私性：安全多方计算首要的目的是各参与方在协作计算时如何对隐私数据进行保护即在计算过程中必须保证各方私密输入独立，计算时不泄露任何本地数据。</li><li>去中心化：安全多方计算中，各参与方地位平等，不存在任何有特权的参与方或第三方，提供一种去中心化的计算模式。</li></ol><h3 id="真实-理想模型"><a href="#真实-理想模型" class="headerlink" title="真实-理想模型"></a>真实-理想模型</h3><ul><li>理想：存在可信第三方；</li><li>真实：无可信第三方；</li><li>目标：真实环境下的敌手无法产生比理想环境下的攻击者更多的危害。</li></ul><h3 id="攻击者模型"><a href="#攻击者模型" class="headerlink" title="攻击者模型"></a>攻击者模型</h3><ul><li>半诚实模型(Semi-Honest Adversaries’ Security)<ul><li>敌手遵循协议，但试图获得其他额外信息；</li></ul></li><li>恶意行为模型(Malicious Adversaries’ Security)<ul><li>敌手可能采取任意行为</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE/">安全协议</category>
      
      
      <category domain="http://example.com/tags/%E8%AF%BE%E4%B8%9A/">课业</category>
      
      
      <comments>http://example.com/2023/10/17/SP-MPC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GO-Fyne</title>
      <link>http://example.com/2023/10/12/GO-Fyne/</link>
      <guid>http://example.com/2023/10/12/GO-Fyne/</guid>
      <pubDate>Thu, 12 Oct 2023 07:01:44 GMT</pubDate>
      
      <description>&lt;p&gt;学习GO语言的Fyne框架&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>学习GO语言的Fyne框架</p><span id="more"></span><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h3><p>Fyne 需要存在 3 个基本元素，Go 工具（至少 1.12 版）、一个 C 编译器（用于连接系统图形驱动程序）和一个系统图形驱动程序。</p><p>linux下需要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>见Fyne的github页面</p><h3 id="简单程序"><a href="#简单程序" class="headerlink" title="简单程序"></a>简单程序</h3><ol><li>使用 app.New() 创建一个应用程序实例</li><li>使用 app.NewWindow() 打开一个窗口</li><li>定义一个小部件树，在窗口上使用 SetContent() 将其设置为主要内容</li><li>通过在窗口上调用 ShowAndRun() 来显示应用程序 UI</li></ol><h3 id="应用和事件"><a href="#应用和事件" class="headerlink" title="应用和事件"></a>应用和事件</h3><p> GUI 应用程序需要运行一个事件（有时称为 runloop）来处理用户交互和绘图事件。</p><p>在 Fyne 中，这是使用<code>App.Run()</code> 或<code>Window.ShowAndRun()</code>函数开始的。必须从<code>main()</code>函数中设置代码的末尾调用其中之一。</p><p>一个应用程序应该只有一个运行循环，因此应该只在代码中调用一次<code>Run()</code>。再次调用它会导致错误。</p><p>对于桌面运行时，可以通过调用<code>App.Quit()</code> 直接退出应用程序（移动应用程序不支持此功能）（通常在开发人员代码中不需要）。关闭所有窗口后，应用程序也将退出。在应用程序退出<code>Run()</code>之前不会调用之后执行的函数。</p><h3 id="更新GUI的内容"><a href="#更新GUI的内容" class="headerlink" title="更新GUI的内容"></a>更新GUI的内容</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步是将要更新的小部件分配给变量。</span></span><br><span class="line">clock := widget.NewLabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">w.SetContent(clock)</span><br><span class="line"><span class="comment">//将标签的内容设置为当前时间 Time.Format</span></span><br><span class="line">formatted := time.Now().Format(<span class="string">&quot;Time: 03:04:05&quot;</span>)</span><br><span class="line">clock.SetText(formatted)</span><br></pre></td></tr></table></figure><h3 id="窗口处理"><a href="#窗口处理" class="headerlink" title="窗口处理"></a>窗口处理</h3><ul><li><p>使用<code>App.NewWindow()</code>创建窗口</p></li><li><p>使用<code>show()</code>展示</p></li><li><p>默认窗体大小就是其Content面板上元素的大小。可以使用<code>Window.Resize()</code>方法设置窗体大小，传入一个宽和高，这个宽高不会受设备实际像素影响。例如让一个窗口显示默认正方形(桌面环境可能存在导致窗口小于请求的限制；移动设备通常会忽略窗体大小，因为移动设备只能以全屏显示)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w.Resize(fyne.NewSize(<span class="number">100</span>, <span class="number">100</span>))</span><br></pre></td></tr></table></figure></li></ul><h4 id="设置多窗口"><a href="#设置多窗口" class="headerlink" title="设置多窗口"></a>设置多窗口</h4><ul><li>创建多个窗口，并分别调用<code>show()</code>函数</li><li>使用<code>Window</code>的<code>SetMaster()</code>函数设置主窗口</li><li>可以在一个窗口内创建一个按钮，使按钮打开新窗口，新窗口会出现在当前活动内容之上。</li></ul><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/149095568">Go 每日一库之 fyne - 知乎 (zhihu.com)</a></li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Go/">Go</category>
      
      
      <category domain="http://example.com/tags/Go/">Go</category>
      
      <category domain="http://example.com/tags/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/">应用程序开发</category>
      
      
      <comments>http://example.com/2023/10/12/GO-Fyne/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SecurityProtocol_BitCommitment</title>
      <link>http://example.com/2023/10/12/SecurityProtocol_BitCommitment/</link>
      <guid>http://example.com/2023/10/12/SecurityProtocol_BitCommitment/</guid>
      <pubDate>Thu, 12 Oct 2023 02:09:23 GMT</pubDate>
      
      <description>&lt;p&gt;比特承诺&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>比特承诺</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h3><ul><li><p>承诺阶段</p></li><li><p>打开阶段</p></li></ul><h3 id="安全性质"><a href="#安全性质" class="headerlink" title="安全性质"></a>安全性质</h3><ul><li><p>隐藏性</p></li><li><p>绑定性：给定承诺阶段的交互信息，B只能接受一个合法承诺，A不能在打开阶段改变自己承诺的比特</p></li></ul><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><ul><li>对称加密函数</li><li>单向散列函数</li><li>伪随机数发生器</li><li>困难问题-Pedersen承诺协议</li></ul><h3 id="对称加密函数"><a href="#对称加密函数" class="headerlink" title="对称加密函数"></a>对称加密函数</h3><ol><li>系统公开参数：基于可信第三方学选取安全的对称加密算法E和相应的解密算法D</li><li>承诺阶段：Alice承诺b<ol><li>Bob产生随机比特串R，并发送给Alice（随机数R是为了保证绑定性，否则Alice易于找到$K’$满足$D_{K’}(E_K(b))&#x3D;b’,b’\neq b$）</li><li>A将$E_K(R,b)$发送给Bob</li></ol></li><li>打开阶段：<ol><li>Alice发送K给Bob</li><li>Bob解密消息</li></ol></li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE/">安全协议</category>
      
      
      <category domain="http://example.com/tags/%E8%AF%BE%E4%B8%9A/">课业</category>
      
      
      <comments>http://example.com/2023/10/12/SecurityProtocol_BitCommitment/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
