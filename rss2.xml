<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>唤问</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>唤询这个小孩</description>
    <pubDate>Sun, 08 Oct 2023 09:54:51 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>ITDB-2-RelationalDB</title>
      <link>http://example.com/2023/10/08/ITDB-2-RelationalDB/</link>
      <guid>http://example.com/2023/10/08/ITDB-2-RelationalDB/</guid>
      <pubDate>Sun, 08 Oct 2023 07:36:24 GMT</pubDate>
      
      <description>&lt;p&gt;课上学习的关于数据库系统的一些基本知识&lt;/p&gt;
&lt;p&gt;第二章-关系数据库&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>课上学习的关于数据库系统的一些基本知识</p><p>第二章-关系数据库</p><span id="more"></span><h2 id="关系数据结构及形式化定义"><a href="#关系数据结构及形式化定义" class="headerlink" title="关系数据结构及形式化定义"></a>关系数据结构及形式化定义</h2><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><h4 id="域"><a href="#域" class="headerlink" title="域"></a>域</h4><p>域是一组具有相同数据类型的值的集合</p><ul><li>值的集合是有限的、且不重复</li><li>集合的概念要求集合中的元素是不重复的</li><li>同一数据类型</li></ul><h4 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h4><ul><li><p>笛卡尔积：给定一组域$D_1，D_2，…，D_n$，允许其中某些域是相同的。$D_1，D_2，…，D_n$的笛卡尔积为： </p><p>$$D_1\times D_2\times …\times D_n&#x3D;{(d_1,d_2,…,d_n)|d_i\in D_i,i&#x3D;1,2,…,n}$$</p><ul><li><p>笛卡尔积是所有域的所有取值的一个组合</p></li><li><p>组合结果不允许重复</p></li></ul></li><li><p>元组：笛卡尔积中的每一个元素称为一个n元组，简称元组</p></li><li><p>分量：元组中的每一个值$d_i$称为一个分量</p></li><li><p>基数：集合中包含元素的个数</p></li><li><p>笛卡尔积的表示方法：</p><ul><li>可表示为一张二维表，每行对应一个元组，每列对应一个域</li></ul></li></ul><h4 id="关系-1"><a href="#关系-1" class="headerlink" title="关系"></a>关系</h4><ul><li>定义<ul><li>$D_1，D_2，…，D_n$的子集称为在域$D_1，D_2，…，D_n$上的关系</li><li>表示：$R(D_1，D_2，…，D_n)$</li><li>$R$：关系名，$n$：关系的目或度</li></ul></li><li>元组：关系中的每个元素为关系中的元组，通常用$t$表示</li><li>单元关系与二元关系：$n$分别为1和2</li><li>表示：<ul><li>关系是一个二维表</li><li>表的每行对应一个元组</li><li>表的每列对应一个域。</li></ul></li><li>属性：<ul><li>关系中不同列可在相同域上</li><li>必须对每列起一个名字,称为属性(attribute)。</li><li>$n$目关系有$n$个属性</li></ul></li><li>码&#x2F;键<ul><li>候选码：若关系中的某一属性组的值能<em>唯一地标识一个元组</em>,而<em>其子集不能</em>，则称该属性组为候选码(candidate key)。</li><li>超键：可唯一标识一个元组的属性组</li><li>全码：关系模式的所有属性组是这个关系模式的候选码，则称为全码</li><li>主键&#x2F;码：若一个关系有多个候选码则选定其中一个为主码(primary key)。</li><li>主属性<ul><li>候选码的诸属性称为主属性</li><li>不包含在任何候选码中的属性成为非主属性&#x2F;非码属性</li></ul></li><li>外键&#x2F;码：设F是基本关系R的一个或一组属性，但不是关系R的码，如果F与基本关系S的主码$K_S$相对应，则称F是基本关系R的外部码(foreign key),简称外码。</li></ul></li><li>实体间的关系<ul><li>实体之间的关系依赖主键-外键关联实现</li></ul></li><li>三类关系<ul><li>基本关系（基本表或基表）<ul><li>实际存在的表，是实际存储数据的逻辑表示</li><li>性质<ul><li>列是同质的：每列的分量来自同一域</li><li>不同列可在同一域上</li><li>列的顺序无关，可任意交换列的次序</li><li>行的顺序无关</li><li>任两个元组的候选码不可相同</li><li>分量必须取原子值</li></ul></li></ul></li><li>查询表<ul><li>查询结果对应的表</li></ul></li><li>视图表<ul><li>由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据</li></ul></li></ul></li></ul><h3 id="关系模式"><a href="#关系模式" class="headerlink" title="关系模式"></a>关系模式</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>关系模式(Relation Schema)是型(Type)，是结构</li><li>关系是值(二维表)</li><li>同一关系模式下，可有很多的关系</li><li>关系模式是关系的结构,关系是关系模式在某一时刻的数据</li><li>关系模式是稳定的;而关系是某一时刻的值，是随时间可能变化的</li><li>关系模式是对关系的描述</li></ul><h3 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li>在给定应用领域中，所有关系的集合构成一个关系数据库</li><li>关系数据库的型与值<ul><li>型：关系数据库模式（schema），是对关系数据库结构的描述</li><li>值：关系模式在某一时刻对应的关系的集合，通常称为关系数据库（RDB）</li></ul></li></ul><h3 id="关系模型的存储结构"><a href="#关系模型的存储结构" class="headerlink" title="关系模型的存储结构"></a>关系模型的存储结构</h3><h2 id="关系操作"><a href="#关系操作" class="headerlink" title="关系操作"></a>关系操作</h2><h3 id="基本的关系操作"><a href="#基本的关系操作" class="headerlink" title="基本的关系操作"></a>基本的关系操作</h3><ul><li><p>常用关系操作</p><ul><li><p>查询操作：8种（其中5种为基本操作）</p><ul><li><p>选择（$\sigma$）、投影（$\pi$）、连接（$\bowtie$）、除（$\div$）、并（$\cup$）、差（$-$）、交（$\cap$）、笛卡尔积（$\times$）</p></li><li><p>其中并、差、笛卡尔积、投影和选择5种运算为基本运算。</p></li><li><p>其他运算的表示：</p><ul><li><p>交：</p><p>$R\cap S&#x3D;R-(R-S)$</p></li><li><p>连接：</p><p>$R \underset{A\Theta B}{\bowtie} S&#x3D; \sigma_{A\Theta B}(R\times S)$</p></li><li><p>除：</p><p>$R(X,Y)\div S(Y,Z)&#x3D;\pi_X(R)-\pi_X(\pi_X(R)\times\pi_Y(S)-R)$</p></li></ul></li></ul></li><li><p>数据更新：插入、删除、修改</p></li></ul></li><li><p>数据操作的特点</p><ul><li>集合操作方式:操作的对象和结果都是集合，一次一集合的方式</li></ul></li></ul><h3 id="关系数据库语言的分类"><a href="#关系数据库语言的分类" class="headerlink" title="关系数据库语言的分类"></a>关系数据库语言的分类</h3><h4 id="关系代数语言"><a href="#关系代数语言" class="headerlink" title="关系代数语言"></a>关系代数语言</h4><ul><li>用对关系的运算来表达查询要求，对关系代数表达式求值</li><li>代表：ISBL</li></ul><h4 id="关系演算语言：用谓词来表达查询要求（选学）"><a href="#关系演算语言：用谓词来表达查询要求（选学）" class="headerlink" title="关系演算语言：用谓词来表达查询要求（选学）"></a>关系演算语言：用谓词来表达查询要求（选学）</h4><h4 id="具有关系代数和关系演算双重特点的语言"><a href="#具有关系代数和关系演算双重特点的语言" class="headerlink" title="具有关系代数和关系演算双重特点的语言"></a>具有关系代数和关系演算双重特点的语言</h4><ul><li>代表：SQL</li></ul><h2 id="关系的完整性"><a href="#关系的完整性" class="headerlink" title="关系的完整性"></a>关系的完整性</h2><p>关系的三类完整性约束</p><ul><li>关系的两个不变性：<ul><li>实体完整性和参照完整性</li><li>是关系模型必须满足的完整性约束条件</li></ul></li><li>用户定义的完整性</li></ul><h3 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h3><ul><li>实体完整性规则：基本关系$R$的主属性不可取空值（NULL）</li></ul><h3 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h3><h4 id="关系间的引用"><a href="#关系间的引用" class="headerlink" title="关系间的引用"></a>关系间的引用</h4><h4 id="外码"><a href="#外码" class="headerlink" title="外码"></a>外码</h4><ul><li>设$F$是基本关系$R$的一个或一组属性，但不是关系$R$的码，如果$F$与基本关系$S$的主码$K_S$相对应，则称$F$是基本关系$R$的外部码(foreign key),简称外码</li><li>基本关系$R$称为参照关系</li><li>基本关系$S$称为被参照关系&#x2F;目标关系</li><li>关系$R$与$S$可以相同</li><li>目标关系$S$的主码$K_S$和参照关系的外码$F$必须定义在同一个&#x2F;组域上</li><li>外码与相应主码可以不同</li></ul><h4 id="参照完整性规则"><a href="#参照完整性规则" class="headerlink" title="参照完整性规则"></a>参照完整性规则</h4><p>对于$R$中每个元组在$F$上的值必须为：</p><ul><li>等于$S$中的某个元组的主码值$K_S$</li><li>或取空值（$F$的每个属性值均为空值）</li></ul><h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><ul><li>关系代数是一种抽象的查询语言，它用关系运算表达查询</li><li>关系代数<ul><li>运算对象是关系</li><li>运算结果亦为关系</li><li>关系代数的运算符有两类：集合运算符和专门的关系运算符</li></ul></li></ul><h2 id="关系演算（选学）"><a href="#关系演算（选学）" class="headerlink" title="关系演算（选学）"></a>关系演算（选学）</h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/">数据库</category>
      
      
      <category domain="http://example.com/tags/%E8%AF%BE%E4%B8%9A/">课业</category>
      
      
      <comments>http://example.com/2023/10/08/ITDB-2-RelationalDB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>IntroductionToDatabaseSystems-Introduction</title>
      <link>http://example.com/2023/10/06/IntroductionToDatabaseSystems-Introduction/</link>
      <guid>http://example.com/2023/10/06/IntroductionToDatabaseSystems-Introduction/</guid>
      <pubDate>Fri, 06 Oct 2023 02:53:31 GMT</pubDate>
      
      <description>&lt;p&gt;课上学习的关于数据库系统的一些基本知识&lt;/p&gt;
&lt;p&gt;第一章-绪论&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>课上学习的关于数据库系统的一些基本知识</p><p>第一章-绪论</p><span id="more"></span><h2 id="数据库系统概述"><a href="#数据库系统概述" class="headerlink" title="数据库系统概述"></a>数据库系统概述</h2><h3 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h3><ol><li><p>数据（Data）</p><ul><li><p>数据 (Data)是数据库中存储的基本对象</p></li><li><p>数据的定义<br>是描述事物的符号记录，是可识别的、抽象的符号</p></li><li><p>数据的种类</p><p>三大类：结构化、半结构化和非结构化</p><ul><li>结构化数据<br>是指可以使用关系型数据库表示和存储，表现为规范的二维表格形式的数据。</li><li>半结构化数据<br>是结构化数据的一种形式，并不符合关系数据模型结构，但包含相关标记用来分隔语义元素，并对记录和字段进行分层。</li><li>非结构化数据<br>是没有固定结构的数据。各种文档、图片、视频&#x2F;音频等都属于非结构化数据。</li></ul></li><li><p>信息：</p><ul><li>是具有<em>时效性</em>的，有一定含义的，有逻辑的、经过<em>加工</em>处理的对决策有价值的<em>数据流</em></li><li>信息 &#x3D; 数据 + 处理</li><li>信息与数据的联系<ul><li>数据是信息的符号表示，或称载体</li><li>信息是数据的内涵，是数据的语义解释</li><li>数据是符号化的信息</li><li>信息是语义化的数据</li></ul></li></ul></li></ul></li><li><p>数据库（Database）</p><ul><li>定义<br>数据库(Database，简称DB) 是长期储存在计算机内、有组织的、可共享的大量数据的集合</li><li>基本特征<ul><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余度较小</li><li>数据独立性较高</li><li>易扩展</li></ul></li></ul></li><li><p>数据库管理系统（DBMS）</p><ul><li>概念<ul><li>位于用户与操作系统之间的一层数据管理软件</li><li>帮助用户定义、创建、维护和控制数据库访问的软件系统</li><li>是基础软件，是一个大型复杂的软件系统</li></ul></li><li>用途<ul><li>科学地组织和存储数据(自动管理)</li><li>高效地获取和维护数据(提供工具和接口)</li></ul></li><li>主要功能<ul><li>数据定义功能<ul><li>提供数据定义语言(DDL)</li><li>定义数据库中的数据对象</li></ul></li><li>数据组织、存储和管理<ul><li>分类组织、存储和管理各种数据</li><li>确定组织数据的文件结构和存取方式</li><li>实现数据之间的联系</li><li>提供多种存取方法提高存取效率</li></ul></li><li>数据操纵功能<ul><li>提供数据操纵语言(DML)</li><li>实现对数据库的基本操作:增、删、改、查</li></ul></li><li>数据库的事务管理和运行管理<ul><li>数据库在建立、运行和维护时，由DBMS统一管理和控制</li><li>保证数据的安全性、完整性;支持多用户对数据的并发使用</li><li>发生故障后的系统数据恢复(自动、手动)</li></ul></li><li>数据库的建立和维护功能<ul><li>数据库初始化:初始数据的装载和转换</li><li>数据库备份、转储、恢复功能</li><li>数据库的重组织</li><li>性能监视、分析等</li></ul></li><li>其它功能<ul><li>数据库管理系统与网络中其它软件系统的通信</li><li>数据库管理系统之间的数据转换</li><li>异构数据库之间的互访和互操作</li></ul></li></ul></li></ul></li><li><p>数据库系统（DBS)</p><ul><li><p>构成</p><ul><li>数据库(Database)<ul><li>底层的数据文件、文件结构和存取方式</li><li>数据字典:数据库结构&#x2F;模式描述</li></ul></li><li>数据库管理系统(DBMS及其应用开发工具)</li><li>应用程序(Application)</li><li>数据库管理员(DBA)</li></ul><p>如图：</p><p><img src="/images/DB/componentofDBS.png" alt="componentofDBS"></p></li><li><p>特点</p><ul><li>数据结构化<ul><li>数据的整体结构化是数据库的主要特征之一</li><li>数据用数据模型描述，无需应用程序定义</li></ul></li><li>数据的共享性高，冗余度低且易扩充<ul><li>数据面向整个系统，可以被多个用户、多个应用共享使用</li><li>数据共享的好处<ul><li>减少数据几余，节约存储空间</li><li>避免数据之间的不相容性与不一致性</li><li>系统容易扩充，方便应用之间互联互通</li></ul></li></ul></li><li>数据独立性高<ul><li>物理独立性<ul><li>应用程序与数据库中数据的物理存储是相互独立的，应用程序不需要关心具体的物理数据结构和存储</li><li>当数据的物理存储改变了，应用程序不用改变</li></ul></li><li>逻辑独立性<ul><li>应用程序与数据库的逻辑结构是相互独立的</li><li>当数据的逻辑结构改变了，应用程序不用改变(在某些条件下成立，很多时候应用程序需要改变)</li></ul></li><li>数据独立性由DBMS的二级映像功能保证</li></ul></li><li>数据由DBMS统一管理和控制<ul><li>数据的安全性 (Security) 保护<ul><li>保护数据以防止不合法的使用造成的数据泄密和破坏</li></ul></li><li>数据的完整性 (Integrity) 检查<ul><li>保证数据的正确性、有效性和相容性</li></ul></li><li>并发(Concurrency) 控制<ul><li>对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结果</li></ul></li><li>数据库恢复 (Recovery)<ul><li>将数据库从错误状态恢复到某一已知的正确状态</li><li>大部分情况下是DBMS自动恢复，个别情况需要手工恢复</li></ul></li></ul></li></ul></li></ul></li></ol><h3 id="数据管理技术的产生和发展"><a href="#数据管理技术的产生和发展" class="headerlink" title="数据管理技术的产生和发展"></a>数据管理技术的产生和发展</h3><ol><li>概念<ul><li>对数据进行分类、组织、编码、存储、检索和维护</li><li>数据处理的中心问题</li></ul></li><li>数据管理技术的发展过程<ul><li>人工管理阶段(20世纪50年代中之前)</li><li>文件系统阶段(20世纪50年代末–60年代中)</li><li>数据库系统阶段(20世纪60年代末–现在)</li></ul></li></ol><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><ul><li>数据模型是对现实世界数据特征的抽象</li><li>数据模型应满足三方面要求<ul><li>能比较真实地模拟现实世界</li><li>容易为人所理解</li><li>便于在计算机上实现</li></ul></li><li>数据模型是数据库系统的核心和基础</li></ul><h3 id="两类数据模型"><a href="#两类数据模型" class="headerlink" title="两类数据模型"></a>两类数据模型</h3><ul><li><p>数据模型分为两类(两个不同的层次)</p><ul><li><p>概念模型</p><ul><li>也称信息模型，它是按用户的观点来对数据和信息建模，用于数据库的初始概念设计，反映对用户业务需求的基本理解</li></ul></li><li><p>逻辑模型和物理模型</p><ul><li>逻辑模型按计算机系统的观点对数据建模，建立的是具体应用的数据库结构，用于DBMS实现，但可不依赖具体的数据库软件厂商和版本。主要包括网状模型、层次模型、关系模型、面向对象数据模型、对象关系数据模型、半结构化数据模型等</li><li>物理模型是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法</li></ul></li></ul></li><li><p>客观对象的抽象过程——两步抽象</p><ul><li>现实世界中的客观对象抽象为概念模型</li><li>将概念模型转换为某一数据库管理系统支持的数据模型</li></ul></li><li><p>数据建模与抽象</p><ul><li>数据建模是业务需求理解和概念抽象的过程<ul><li>三个阶段：需求分析-逻辑建模-物理建模</li></ul></li><li>抽象过程:理解-区分-命名-表达</li></ul></li></ul><h3 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h3><h4 id="概念模型简介"><a href="#概念模型简介" class="headerlink" title="概念模型简介"></a>概念模型简介</h4><ul><li>概念模型的用途<ul><li>概念模型用于信息世界的建模</li><li>是现实世界到信息世界的一个中间层次</li><li>是数据库设计的有力工具</li><li>是数据库设计人员和用户之间进行交流的语言</li></ul></li><li>对概念模型的基本要求<ul><li>较强的语义表达能力</li><li>反映业务逻辑，用客户的述语描述</li><li>简单、清晰、易于用户理解</li></ul></li><li>概念模型的一种表示方法-ERD</li></ul><h4 id="信息世界中的基本概念"><a href="#信息世界中的基本概念" class="headerlink" title="信息世界中的基本概念"></a>信息世界中的基本概念</h4><ul><li><p>实体(Entity)</p><ul><li>客观存在并可相互区别的事物称为实体</li></ul></li><li><p>属性(Attribute)</p><ul><li>实体所具有的某一特性称为属性</li><li>一个实体可以由若干个属性来刻画。</li></ul></li><li><p>码&#x2F;键(Key)</p><ul><li>唯一标识实体的属性集称为码</li></ul></li><li><p>实体型(Entity Type)</p><ul><li>用实体名及其属性名集合来抽象和刻画同类实体称为实体型 (结构，类，class)</li></ul></li><li><p>实体集(Entity Set)</p><ul><li>同一类型实体的集合称为实体集 (实例instances）</li></ul></li><li><p>联系(Relationship)</p><ul><li>现实世界中事物内部以及事物之间的联系，在信息世界中反映为实体 (型)内部的联系和实体(型)之间的联系</li><li>实体内部的联系通常是指组成实体的各属性之间的联系</li><li>实体之间的联系通常是指不同实体集之间的联系</li><li>实体之间的联系有一对一、一对多和多对多等多种类型</li></ul></li></ul><h3 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li>数据模型的数据结构<ul><li>描述数据库的组成对象，以及对象之间的联系。</li></ul></li><li>描述的内容<ul><li>与对象的类型、内容、性质有关</li><li>与数据之间联系有关</li></ul></li><li>数据结构是对系统静态特性的描述</li></ul><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><ul><li>概念<ul><li>对数据库中各种对象(型)的实例(值)允许执行的操作的集合，包括操作及有关操作规则</li></ul></li><li>数据操作的类型(CRUD)<ul><li>查询(Select)</li><li>更新<ul><li>插入 (Insert)</li><li>删除(Delete)</li><li>修改(Update)</li></ul></li></ul></li></ul><h4 id="数据的完整性约束条件"><a href="#数据的完整性约束条件" class="headerlink" title="数据的完整性约束条件"></a>数据的完整性约束条件</h4><ul><li>一组完整性规则的集合</li><li>完整性规则:给定的数据模型中数据及其联系所具有的制约和依存规则</li><li>用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效和相容</li><li>数据模型对完整性约束条件的定义<ul><li>规定必须遵守的、基本的、通用的完整性约束条件</li><li>提供定义完整性约束条件的机制，以反映具体应用所涉及的数据必须遵守的特定的语义约束条件</li></ul></li></ul><h3 id="最常用的数据模型"><a href="#最常用的数据模型" class="headerlink" title="最常用的数据模型"></a>最常用的数据模型</h3><ul><li>层次模型(Hierarchical Model)</li><li>网状模型(Network Model)</li><li>关系模型(Relational Model))</li><li>面向对象数据模型(Object Oriented Data Model)</li><li>对象关系数据模型(Object Relational Data Model)</li><li>半结构化数据模型(Semi-structured Data Model)</li><li>图数据模型 (Graph Data Model)</li></ul><h3 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h3><ul><li><p>用<em>树形结构</em>来表示各类实体即实体间的联系</p></li><li><p>特点</p><ul><li>结点的双亲是唯一的</li><li>只能直接处理一对多的实体联系</li><li>每个记录类型可以定义一个排序字段，也称为码字段</li><li>任何记录值只有按其路径查看时，才能显出它的全部意义</li><li>没有一个子女记录值能够脱离双亲记录值而独立存在</li></ul></li><li><p>优点</p><ul><li>层次模型的数据结构比较简单清晰</li><li>查询效率高，性能优于关系模型，不低于网状模型</li><li>层次数据模型提供了良好的完整性支持</li></ul></li><li><p>缺点</p><ul><li>结点之间的多对多联系表示不自然</li><li>对插入和删除操作的限制多，应用程序的编写比较复杂</li><li>查询子女结点必须通过双亲结点</li><li>层次命令趋于程序化</li></ul></li></ul><h3 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h3><ul><li>概念<ul><li>满足下面两个条件的基本层次联系的集合<ul><li>允许一个以上的结点无双亲</li><li>一个结点可以有多于一个的双亲</li></ul></li></ul></li></ul><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><ul><li>内涵<ul><li>在用户观点下，关系模型中数据的逻辑结构是一张二维表，它由行和列组成</li></ul></li><li>概念<ul><li>关系(Relation)<ul><li>一个关系对应通常说的一张表(包括表中的数据)</li></ul></li><li>元组(Tuple)<ul><li>表中的一行即为一个元组</li></ul></li><li>属性(Attribute)<ul><li>表中的一列，即为一个属性</li><li>给每一个属性起一个名称，即属性名</li></ul></li><li>主码&#x2F;主键(Key)<ul><li>也称码或键，表中的某个属性组，可以唯一确定一个元组</li></ul></li><li>域(Domain)<ul><li>是一组具有相同数据类型的值的集合</li><li>属性的取值范围来自某个域。</li></ul></li><li>分量(Component)<ul><li>元组中的一个属性值</li></ul></li><li>关系模式(Relation Schema<ul><li>对关系的结构描述</li><li>关系名(属性1，属性2属性n)</li></ul></li></ul></li><li>关系必须是规范化的，满足一定的规范条件<ul><li>最基本的规范条件:关系的每一个分量必须是一个不可分的数据项，不允许表中还有表</li></ul></li><li>数据操作是集合操作，操作对象和操作结果都是关系<ul><li>查询<ul><li>SELECT customer id, name FROM customers;</li></ul></li><li>插入<ul><li>INSERT INTO Student VALUES (‘201215126’,’张成民,’男’,18,’CS’);</li></ul></li><li>删除<ul><li>DELETE FROM Student WHERE Sno&#x3D; 201215128;</li></ul></li><li>更新</li><li>UPDATE Student SET Sage&#x3D; Sage+l;</li></ul></li><li>存取路径对用户隐蔽</li><li>关系的完整性约束条件<ul><li>实体完整性</li><li>参照完整性</li><li>用户定义的完整性</li></ul></li><li>优点<ul><li>建立在严格的数学概念的基础上</li><li>概念单一<ul><li>实体和各类联系都用关系来表示</li><li>对数据的检索结果也是关系</li></ul></li><li>关系模型的存取路径对用户透明<ul><li>具有更高的数据独立性，更好的安全保密性</li><li>简化了程序员的工作和数据库开发建立的工作</li></ul></li></ul></li><li>缺点<ul><li>存取路径对用户透明，查询效率往往不如格式化数据模型(指层次模型和网状模型)</li><li>为提高性能，必须对用户的查询请求进行优化，增加了开发数据库管理系统的难度</li></ul></li></ul><h2 id="数据库系统的结构"><a href="#数据库系统的结构" class="headerlink" title="数据库系统的结构"></a>数据库系统的结构</h2><ul><li>从数据库应用开发人员角度看，数据库系统通常采用三级模式结构，是数据库系统内部的系统结构</li><li>从数据库最终用户角度看，数据库系统的结构分为:<ul><li>单用户结构</li><li>分布式结构</li><li>客户-服务器</li><li>浏览器-应用服务器&#x2F;数据库服务器多层结构等</li></ul></li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>型(Type)</p><ul><li>对某一类数据的结构和属性的说明</li></ul></li><li><p>值(Value)</p><ul><li>是型的一个具体赋值</li></ul></li><li><p>模式(Schema)</p><ul><li>数据库逻辑结构和特征的描述</li><li>是型的描述，不涉及具体值</li><li>反映的是数据的结构及其联系</li><li>模式是相对稳定的</li></ul></li><li><p>实例(Instance)</p><ul><li>模式的一个具体值</li><li>反映数据库某一时刻的状态</li><li>同一个模式可以有很多实例</li><li>实例随数据库中的数据的更新而变动</li></ul></li></ul><h3 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h3><ul><li>内模式（也称存储模式）<ul><li>是数据物理结构和存储方式的描述</li><li>是数据在数据库内部的表示方式<ul><li>记录的存储方式(例如，顺序存储，按照B树结构存储，按hash方法存储等)</li><li>索引的组织方式</li><li>数据是否压缩存储</li><li>数据是否加密</li><li>数据存储记录结构的规定</li></ul></li><li>一个数据库只有一个内模式</li><li>内模式对用户是“半透明”的<ul><li>数据库的物理结构是依赖于DBMS的具体实现，如数据文件和索引结构等</li><li>存储方式部分可由用户指定，如索引的类型、是否加密等</li><li>物理模型的具体定义(Create Table&#x2F;Index等)确定了数据库的物理结构</li><li>用户不能直观看到和了解具体的物理结构</li></ul></li></ul></li><li>模式（也称逻辑模式）<ul><li>数据库中全体数据的逻辑结构和特征的描述</li><li>所有用户的公共数据视图</li><li>一个数据库只有一个模式</li><li>模式的地位:是数据库系统模式结构的中间层<ul><li>与数据的物理存储细节和硬件环境无关</li><li>与具体的应用程序、开发工具及高级程序设计语言无关</li></ul></li><li>模式的定义<ul><li>(数据项的名字、类型、取值范围等)数据的逻辑结构</li><li>数据之间的联系</li><li>数据有关的安全性、完整性要求</li><li>可以使用ERD表达和描述</li></ul></li></ul></li><li>外模式(也称子模式或用户模式)<ul><li>数据库用户(包括应用程序员和最终用户)使用的局部数据的逻辑结构和特征的描述</li><li>数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</li><li>技术上使用视图View定义和描述</li><li>外模式的地位:介于模式与应用之间<ul><li>模式与外模式的关系:一对多<ul><li>外模式通常是模式的子集</li><li>一个数据库可以有多个外模式。反映了不同的用户的应用需求、看待数据的方式、对数据保密的要求</li><li>对模式中同一数据，在外模式中的结构、类型、长度、保密级别等都可以不</li></ul></li><li>外模式与应用的关系一对多<ul><li>同一外模式也可以为某一用户的多个应用系统所使用</li><li>一个应用程序只能使用一个外模式</li></ul></li><li>外模式的用途<ul><li>保证数据库安全性的一个有力措施</li><li>每个用户只能看见和访问所对应的外模式中的数据</li></ul></li></ul></li></ul></li></ul><h3 id="数据库的二级映像功能与数据独立性"><a href="#数据库的二级映像功能与数据独立性" class="headerlink" title="数据库的二级映像功能与数据独立性"></a>数据库的二级映像功能与数据独立性</h3><ul><li>三级模式是对数据的三个抽象级别</li><li>二级映象在数据库管理系统内部实现这三个抽象层次的联系和转换<ul><li>外模式&#x2F;模式映像<ul><li>模式:描述的是数据的全局逻辑结构</li><li>外模式:描述的是数据的局部逻辑结构</li><li>同一个模式可以有任意多个外模式</li><li>每一个外模式，数据库系统都有一个外模式&#x2F;模式映象，定义外模式与模式之间的对应关系</li><li>映象定义通常包含在各自外模式的描述中</li><li>保证数据的逻辑独立性<ul><li>当模式改变时，数据库管理员对外模式&#x2F;模式映象作相应改变，使外模式保持不变</li><li>应用程序是依据数据的外模式编写的，应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性</li></ul></li></ul></li><li>模式&#x2F;内模式映像<ul><li>模式&#x2F;内模式映象定义了数据全局逻辑结构与存储结构之间的对应关系</li><li>数据库中模式&#x2F;内模式映象是唯一的</li><li>该映象定义通常包含在模式描述中</li><li>保证数据的物理独立性<ul><li>当数据库的存储结构改变了(例如选用了另一种存储结构),数据库管理员修改模式&#x2F;内模式映象，使模式保持不变</li><li>应用程序不受影响。保证了数据与程序的物理独立性，简称数据的物理独立性</li></ul></li></ul></li><li>二级映像作用<ul><li>保证了数据库外模式的稳定性</li><li>从底层保证了应用程序的稳定性，除非应用需求本身发生变化，否则应用程序一般不需要修改</li><li>数据与程序之间的独立性，使得数据的定义和描述可以从应用程序中分离出去</li><li>数据的存取由数据库管理系统管理</li></ul></li></ul></li></ul><h2 id="数据库系统的组成"><a href="#数据库系统的组成" class="headerlink" title="数据库系统的组成"></a>数据库系统的组成</h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/">数据库</category>
      
      
      <category domain="http://example.com/tags/%E8%AF%BE%E4%B8%9A/">课业</category>
      
      
      <comments>http://example.com/2023/10/06/IntroductionToDatabaseSystems-Introduction/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Application of Cryptography</title>
      <link>http://example.com/2023/10/05/Cryptography/</link>
      <guid>http://example.com/2023/10/05/Cryptography/</guid>
      <pubDate>Thu, 05 Oct 2023 02:25:55 GMT</pubDate>
      
      <description>&lt;p&gt;记录一些密码学应用层面的知识&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>记录一些密码学应用层面的知识</p><span id="more"></span><h2 id="公钥基础设施"><a href="#公钥基础设施" class="headerlink" title="公钥基础设施"></a>公钥基础设施</h2><p>公钥基础设施（Public Key Infrastructure， PKI）是一种用公钥密码理论和技术实施和提供安全服务，具有普适性的安全基础设施。 在实际应用中， PKI 将用户身份与其公钥结合，解决公钥的可信性问题。  </p><p>PKI 的重要组件包括证书机构（Certificate Authority， CA）以及数字证书。CA 负责验证用户的身份，并签发对应数字证书。数字证书则是证明证书中公钥所有权的文件，是由已经验证该公钥所有权的 CA 签发，因此，数字证书的安全性基于对 CA 的信任。  </p><h2 id="X-509-数字证书"><a href="#X-509-数字证书" class="headerlink" title="X.509 数字证书"></a>X.509 数字证书</h2><p>数字证书一般包括公钥，拥有者的身份标识以及可信实体的签名。接收者可以通过验证签名来保证证书的完整性。验证成功后，接收者将会确定公钥的拥有者。 X.509 标准规定了数字证书的格式，其主要包括：</p><ul><li>Issuer：该域包含了签发该证书的 CA 信息；</li><li>Subject：该域包含了证书中公钥的拥有者信息；</li><li>Public key：该域包含了公钥信息，包括公钥算法以及具体公钥等；</li><li>Signature：该域包含了签发者（ Issuer）的数字签名信息，包括签名算法以及具体签名等；</li><li>Validity：该域包含了该数字证书的有效期；</li><li>Serial number：每个证书都有一个独特的序列号，用于与其他证书区分；</li><li>Extensions：更新版本的 X.509 证书包含可选的扩展域。</li></ul><h2 id="PGP-加解密技术"><a href="#PGP-加解密技术" class="headerlink" title="PGP 加解密技术"></a>PGP 加解密技术</h2><p>PGP（ Pretty Good Privacy） 由 Phil Zimmermann 于 1991 年开发， 是一种可为数据通信提供加密与身份认证的程序，常被用于电子邮件的加解密与签名， 提高了电子邮件通信的安全性。 PGP 本身是商业应用程序， 开源并具有同类功能的工具是由自由软件基金会开发的 GnuPG（ GPG）。   </p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/">密码学</category>
      
      
      <category domain="http://example.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/">密码学</category>
      
      <category domain="http://example.com/tags/%E5%BA%94%E7%94%A8/">应用</category>
      
      
      <comments>http://example.com/2023/10/05/Cryptography/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>tools in Linux</title>
      <link>http://example.com/2023/10/01/tools-in-Linux/</link>
      <guid>http://example.com/2023/10/01/tools-in-Linux/</guid>
      <pubDate>Sun, 01 Oct 2023 02:21:31 GMT</pubDate>
      
      <description>&lt;p&gt;在Linux下使用过的一些工具&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>在Linux下使用过的一些工具</p><span id="more"></span><h2 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h2><p>加解密命令库</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssl</span><br></pre></td></tr></table></figure><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl enc [cipher_type] </span><br></pre></td></tr></table></figure><ul><li>-e： 加密</li><li>-d：解密</li><li>-in [file]：指定输入文件</li><li>-out [file]：指定输出文件</li><li>-K：指定密钥（十六进制形式）（注意K大写）</li><li>-iv：指定初始向量（十六进制形式）</li></ul><h4 id="查看PKI信息"><a href="#查看PKI信息" class="headerlink" title="查看PKI信息"></a>查看PKI信息</h4><ol><li><p>证书信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -noout -text -in ca.crt</span><br></pre></td></tr></table></figure></li><li><p>密钥信息（需要输入密钥加密口令）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in server.key -text</span><br></pre></td></tr></table></figure></li><li><p>待续</p></li></ol><h3 id="PKI"><a href="#PKI" class="headerlink" title="PKI"></a>PKI</h3><ol><li><p>建立CA</p><ol><li><p>准备一个目录（假设命名为PKI）</p></li><li><p>拷贝openssl提供的配置文件&#x2F;usr&#x2F;lib&#x2F;ssl&#x2F;openssl.cnf，并按照配置文件要求创建相应文件（先创建dir,certs,crl_dir,database,new_certs_dir,serial即可)：</p><p><img src="/images/toolsinlinux/opensslconf.png" alt="opensslconf"></p><p>其中，对于 index.txt 文件，只需创建一个空文件；对于 serial 文件，创建文件后需要输入序列号，以文件形式输入的序列号应为偶数位数的 16 进制数字，如 1000，0a等。</p></li><li><p>返回 PKI 目录， 利用 openssl req 命令为 CA 生成一个自签名证书，该证书证明 CA 可信，并成为根证书：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -keyout ca.key -out ca.crt -config openssl.cnf</span><br></pre></td></tr></table></figure><p>参数含义：</p><ul><li>new: 创建一个证书请求文件，若之后指定了-x509 选项，代表创建自签名证书文件</li><li>-keyout [file]: 指定自动创建私钥时私钥的输出文件</li><li>-config [file]: 指定 req 命令的配置文件</li></ul><p>在证书生成过程中，需要输入口令（ passphrase） 与相关信息，该 CA 在每次签发证书时都会要求输入口令。另外， 还需要输入一些相关信息，例如 Country Name, Common Name 等，可以自行输入，也可以按回车键使用默认值。输出文件包括 ca.key 与 ca.crt。</p></li></ol></li><li><p>利用CA签发证书</p></li></ol><p>   假设有一个网站 PKILab.com，需要从 CA 处取得一个电子证书，可以通过以下步骤完成签发流程。  </p><ol><li><p>PKILab.com 需要生成自己的公私钥对：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -aes128 -out server.key 2048</span><br></pre></td></tr></table></figure></li><li><p>PKILab.com 需要生成证书请求文件（CSR）。该文件包含 PKILab.com的公钥，并会被发送给 CA，请求 CA 对公钥进行签名：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key server.key -out server.csr -config openssl.cnf</span><br></pre></td></tr></table></figure><p>在生成证书请求文件的过程中，对于 CommonName 域，应输入“PKILab.com”；对于extra中的attributes域，可自行输入，或直接按回车键使用默认值；对于其他域，应与CA保持一致。</p></li><li><p>CA收到证书请求文件（server.csr）后，利用自己的私钥（ca.key） 与证书（ca.crt）， 签名并生成 PKILab.com 所需的 X509 证书（server.crt）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key -config openssl.cnf</span><br></pre></td></tr></table></figure></li></ol><h2 id="ghex-bless"><a href="#ghex-bless" class="headerlink" title="ghex&#x2F;bless"></a>ghex&#x2F;bless</h2><p>两者均为二进制文件编辑器。均可通过apt直接安装。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%B7%A5%E5%85%B7/">工具</category>
      
      
      <category domain="http://example.com/tags/Linux/">Linux</category>
      
      <category domain="http://example.com/tags/%E5%B7%A5%E5%85%B7/">工具</category>
      
      
      <comments>http://example.com/2023/10/01/tools-in-Linux/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Virtual Machine</title>
      <link>http://example.com/2023/10/01/Virtual-Machine/</link>
      <guid>http://example.com/2023/10/01/Virtual-Machine/</guid>
      <pubDate>Sun, 01 Oct 2023 01:23:20 GMT</pubDate>
      
      <description>&lt;p&gt;关于虚拟机的一些基础知识&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>关于虚拟机的一些基础知识</p><span id="more"></span><h2 id="网络模式（以VirtualBox为例）"><a href="#网络模式（以VirtualBox为例）" class="headerlink" title="网络模式（以VirtualBox为例）"></a>网络模式（以VirtualBox为例）</h2><p>VirtualBox提供5 种网络模式，分别是仅主机网络（Host-only networking）、内部网络（Inte  rnal networking）、桥接网络（Bridged networking）、网络地址转换（NAT）、 NAT 网络（NAT Network）。 不同模式的连接情况如下</p><ol><li>仅主机网络模式： 虚拟机网卡连接到主机上，但是主机不为虚拟机提供任何网络服务；</li><li>内部网络模式： 虚拟机之间互相连接，但不与主机连接；</li><li>桥接模式： 虚拟机直接连接到网络中，与主机没有连接关系；</li><li>网络地址转换模式： 虚拟机网卡连接到主机上，主机充当路由器的作用，负责将虚拟机的数据包进行地址转换之后发到网络上，再将网络上返回 的包进行地址转换后发送给虚拟机；</li><li>NAT 网络模式： 在网络地址转换模式的基础上增加了内部网络功能。</li></ol><p>不同网络模式下， 虚拟机与主机、 虚拟机与其他虚拟机、 虚拟机与 Internet网络的连接情况如下表：</p><table><thead><tr><th>mode</th><th>VM-&gt;Host</th><th>VM&lt;-Host</th><th>VM1&lt;-&gt;VM2</th><th>VM-&gt;Internet</th><th>VM&lt;-Internet</th></tr></thead><tbody><tr><td>Host-only</td><td>T</td><td>T</td><td>T</td><td>F</td><td>F</td></tr><tr><td>Internal</td><td>F</td><td>F</td><td>T</td><td>F</td><td>F</td></tr><tr><td>Bridged</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td></tr><tr><td>NAT</td><td>T</td><td>端口转发</td><td>F</td><td>T</td><td>端口转发</td></tr><tr><td>NAT Network</td><td>T</td><td>端口转发</td><td>T</td><td>T</td><td>端口转发</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86/">常用知识</category>
      
      
      
      <comments>http://example.com/2023/10/01/Virtual-Machine/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux</title>
      <link>http://example.com/2023/10/01/Linux/</link>
      <guid>http://example.com/2023/10/01/Linux/</guid>
      <pubDate>Sun, 01 Oct 2023 01:14:29 GMT</pubDate>
      
      <description>&lt;p&gt;关于Linux的一些基本知识&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>关于Linux的一些基本知识</p><span id="more"></span><h2 id="Linux-系统文件架构"><a href="#Linux-系统文件架构" class="headerlink" title="Linux 系统文件架构"></a>Linux 系统文件架构</h2><p><img src="/images/linux/Linux%E6%96%87%E4%BB%B6%E6%9E%B6%E6%9E%84.png" alt="Linux文件架构"></p><ul><li>&#x2F;bin: 存放常用的终端命令的目录，例如 ls、mount、rm 等等;</li><li>&#x2F;dev: 存放所有的设备文件，指系统上的各种硬件设备，包括硬盘驱动器；</li><li>&#x2F;etc: 存放系统的全局配置文件，这些配置文件会影响系统所有用户的系统环境;</li><li>&#x2F;home: 存放用户工作目录，每个用户在该目录下都有自己的工作目录;</li><li>&#x2F;lib: 存放动态库和内核模块;</li><li>&#x2F;mnt: 作为临时设备的一个挂载点，例如网络文件系统;</li><li>&#x2F;proc: 一个虚拟文件系统，为内核提供向进程发送信息的机制，可以从中读取进程状态;</li><li>&#x2F;tmp: 存放应用程序使用的临时文件:</li><li>&#x2F;usr: 存放大多数应用程序，并复制部分根目录结构，包括 &#x2F;usr&#x2F;bin&#x2F;和 &#x2F;usr&#x2F;lib&#x2F;;</li><li>&#x2F;var: 存放可变数据，例如日志，数据库，网站和临时脱机 (电子邮件等)文件，其中 &#x2F;var&#x2F;log 目录保存了系统日志文件。</li></ul><h2 id="Linux-用户管理"><a href="#Linux-用户管理" class="headerlink" title="Linux 用户管理"></a>Linux 用户管理</h2><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><h4 id="password"><a href="#password" class="headerlink" title="password"></a>password</h4><p>Linux 是一个多用户多任务的分时操作系统，允许多个用户共享使用同一台计算机资源。用户的账号在该机制下，一方面，可以帮助用户组织文件，保障安全性；另一方面可以帮助系统管理员对当前使用计算机的用户进行跟踪，控制它们访问系统资源的权限。 通常，系统将所有用户的账户信息储存在公共文件&#x2F;etc&#x2F;passwd 中。 该文件中每一行代表一个账户，不同域使用“:” 号隔开，代表不同信息，各域的含义如下图 1，也可以通过 man 5 passwd 命令查看各个域的具体含义 。</p><p><img src="/images/linux/password%E4%BF%A1%E6%81%AF.png" alt="password"></p><h4 id="shadow"><a href="#shadow" class="headerlink" title="shadow"></a>shadow</h4><p>账户口令信息储存在受保护文件&#x2F;etc&#x2F;shadow 中，非 root 用户无法打开。同样，该文件中每一行代表一个账户，不同域使用:号隔开，代表不同信息，其中， 口令时间相关信息包括口令最后被修改的时间、修改口令的最小期限、 修改口令的最大期限、 口令过期提醒时间、 口令过期失效时间、 账户过期时间等， 可以通过 man 5 shadow   命令查看各个域的具体含义。账户的口令并不以明文形式存储。 Linux 系统储存的是口令加盐之后的哈希值，其口令信息的格式为 $id$salt$hash，其中， id 代表代表不同的哈希方式，包括$1$ &#x3D;&#x3D; md5， $5$ &#x3D;&#x3D; sha256， $6$ &#x3D;&#x3D; sha512 等。  </p><h2 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h2><h3 id="常规命令"><a href="#常规命令" class="headerlink" title="常规命令"></a>常规命令</h3><ul><li><blockquote><p>pwd</p></blockquote>显示终端当前工作路径</li></ul><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><ul><li><blockquote><p>whereis [file_name]</p></blockquote><p>用于查找文件</p></li><li><blockquote><p>cp [file] [new_file]</p></blockquote></li><li><blockquote><p>rm [file_name]</p></blockquote><p>删除</p><ul><li>-r 递归删除，用于删除整个文件夹</li><li>-f 强制删除，不建议使用</li></ul></li></ul><h3 id="文件编辑与查看"><a href="#文件编辑与查看" class="headerlink" title="文件编辑与查看"></a>文件编辑与查看</h3><ul><li><blockquote><p>touch [file_name]</p></blockquote><p>用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会用于创建文件 </p></li><li><blockquote><p>head</p></blockquote><p>查看文件开头部分内容；</p><ul><li>-n：以行为单位</li><li>-c：以字节为单位</li></ul><p>例：</p><blockquote><p>head -c 55 picture.bmp &gt; head</p></blockquote></li><li><blockquote><p>tail</p></blockquote><p>查看文件内容</p><ul><li><p>-n：以行为单位</p><ul><li><blockquote><p>tail -n 10 [file]</p></blockquote><p>显示最后10行</p></li><li><blockquote><p>tail -n +10 [file]</p></blockquote><p>显示从第十行到末尾</p></li></ul></li><li><p>-c：以字节为单位</p><p>同上</p></li></ul></li><li><blockquote><p>diff</p></blockquote><p>比较两个文件的内容</p><ul><li>-q：两文件的不同</li><li>-s：两文件的相同</li></ul></li><li><blockquote><p>hexdump</p></blockquote><ul><li>-n length：格式化输出文件的前length个字节</li><li>-C：输出规范的十六进制和ASCII码</li><li>-b：单字节八进制显示</li><li>-c：单字节字符显示</li><li>-d：双字节十进制显示</li><li>-o：双字节八进制显示</li><li>-x：双字节十六进制显示</li><li>-s：从偏移量开始输出</li><li>-e： 指定格式字符串</li></ul></li><li><blockquote><p>wc</p></blockquote><blockquote><p>wc -c [file]</p></blockquote><p>查看文件大小</p></li></ul><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><ul><li><blockquote><p>ifconfig</p></blockquote>查看网络设置</li></ul><h3 id="密码学操作"><a href="#密码学操作" class="headerlink" title="密码学操作"></a>密码学操作</h3><ul><li><blockquote><p>md5sum</p></blockquote>计算文件的md5值</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86/">常用知识</category>
      
      
      <category domain="http://example.com/tags/Linux/">Linux</category>
      
      
      <comments>http://example.com/2023/10/01/Linux/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo</title>
      <link>http://example.com/2023/09/30/hexo/</link>
      <guid>http://example.com/2023/09/30/hexo/</guid>
      <pubDate>Sat, 30 Sep 2023 13:34:06 GMT</pubDate>
      
      <description>&lt;p&gt;some simple operation about hexo&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>some simple operation about hexo</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%95%99%E7%A8%8B/">教程</category>
      
      
      
      <comments>http://example.com/2023/09/30/hexo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2023/09/29/hello-world/</link>
      <guid>http://example.com/2023/09/29/hello-world/</guid>
      <pubDate>Fri, 29 Sep 2023 02:59:43 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;欢迎来到我的个人博客！&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>欢迎来到我的个人博客！</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/09/29/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
